export class BuildSession {
    constructor(jFile) {
        this.jFile = jFile;
        this.jsonData = null;
        this.container = document.querySelector('.comment-container');
        this.btn = this.commentBox = this.commentBoxTextarea = null;
        this.replyJsonTarget = null;
        this.editUndoContainer = this.editorCreateEditConfirmUndo();
        this.getJsonData();
    } 
    // FETCH data
    async getJsonData() {
        this.jsonData = JSON.parse(localStorage.getItem(['dataJson']));
        if(!this.jsonData) {
            try {
                this.jsonData = await fetch(this.jFile).then(res => res.json()).then( data => data);
                localStorage.setItem('dataJson', JSON.stringify(this.jsonData));
                this.initBS();
            }
            catch(error) {
                console.log(error);
            }
        } else {
            this.container.innerHTML = "";
            this.initBS(); 
        }
    }
    //Initiator
    initBS() {
        this.drawUp();
        this.eventsListener();
    }
    drawUp() {
        this.jsonData.comments.forEach( c => {
            this.buildElement(c, 'comment', this.container);
            if(c.replies.length > 0) {
                c.replies.forEach( r => {
                    this.buildElement(r, 'reply', this.container);
                });
            } 
        });
        this.container.append(this.responseSec());
    }
    // General
    buildComment() {
        //Create html elements
        const comment = document.createElement('div'),
            commentUserGrid = document.createElement('div'),
            commentRate = document.createElement('div'),
            commentRatePlus = document.createElement('button'),
            commentRatePlusObj = document.createElement('object'),
            commentRateValue = document.createElement('span'),
            commentRateMinus = document.createElement('button'),
            commentRateMinusObj = document.createElement('object'),
            commentTopFb = document.createElement('div'),
            commentTopFbAvatar = new Image(),
            commentTopFbUid = document.createElement('span'),
            commentTopFbDate = document.createElement('span'),
            commentBottomContent = document.createElement('div');
        //Assign classes
        comment.classList.add('comment-user-main-grid-container');
        commentUserGrid.classList.add('comment-user-grid-element', 'comment-rate');
        commentRate.classList.add('comment-rate-flexbox');
        commentRatePlus.classList.add('comment-rate-element', 'comment-rate-element-plus');
        commentRatePlusObj.classList.add('vote');
        commentRatePlusObj.setAttribute('type', 'image/svg+xml');
        commentRatePlusObj.setAttribute('data', 'images/icon-plus.svg');
        commentRateValue.classList.add('comment-rate-element', 'comment-rate-element-value');
        commentRateMinus.classList.add('comment-rate-element', 'comment-rate-element-minus');
        commentRateMinusObj.classList.add('vote');
        commentRateMinusObj.setAttribute('type', 'image/svg+xml');
        commentRateMinusObj.setAttribute('data', 'images/icon-minus.svg');
        commentTopFb.classList.add('comment-user-grid-element', 'comment-user-flexbox-container');
        commentTopFbAvatar.classList.add('comment-user-flexbox-element', 'comment-avatar');
        commentTopFbUid.classList.add('comment-user-flexbox-element', 'comment-uid');
        commentTopFbDate.classList.add('comment-user-flexbox-element', 'comment-date');        
        commentBottomContent.classList.add('comment-user-grid-element', 'comment-content');
        //Connect elements
        comment.append(commentUserGrid, commentTopFb, commentBottomContent);
        commentUserGrid.append(commentRate);
        commentRatePlus.append(commentRatePlusObj, commentRatePlusObj);
        commentRateMinus.append(commentRateMinusObj, commentRateMinusObj);
        commentRate.append(commentRatePlus, commentRateValue, commentRateMinus);
        commentTopFb.append(commentTopFbAvatar, commentTopFbUid, commentTopFbDate);
        
        return comment;
    }
    createInteractButtons(type, target) {
        const replyEditDeleteBtn = (btnType) => {
            const commentTopFbBtn = document.createElement('button'),
                commentTopFbBtnImage = document.createElement('object'),
                commentTopFbBtnContent = document.createElement('span');

            commentTopFbBtn.classList.add('comment-user-flexbox-element', `comment-${btnType}`);
            commentTopFbBtnImage.classList.add('interact');
            commentTopFbBtn.type = 'button';
            commentTopFbBtnImage.type = 'image/svg+xml';
            
            commentTopFbBtnImage.data = `images/icon-${btnType}.svg`;
            commentTopFbBtnContent.innerText = `${btnType[0].toUpperCase()}${btnType.slice(1)}`;
            commentTopFbBtn.append(commentTopFbBtnImage, commentTopFbBtnContent);
            
            return commentTopFbBtn;
        };
        
       return target.append(replyEditDeleteBtn(type));       
    }
    createCommentReplyObj() {
        const getMaxId = (obj) => {
            let a = [];
            const getMax = (a, b) => Math.max(a, b);
            obj.comments.forEach( c => {
                a.push(c.id);
                if(c.replies.length > 0) {
                    c.replies.forEach( r => a.push(r.id) );
                }
            });
            return a.reduce(getMax);
        }
        const cuObj = {};        
        cuObj.id = getMaxId(JSON.parse(localStorage['dataJson'])) + 1; 
        cuObj.content = this.commentBoxTextarea.value;
        cuObj.createdAt = new Date().getSeconds();
        cuObj.replyingTo =
        cuObj.score = 0;
        cuObj.user = this.jsonData.currentUser;
        cuObj.replies = [];
        return cuObj;
    }
    // Build on first load and on responses
    buildElement(obj, type, target) {
        const isCurrentUser = () => {
                if(obj.user.username !== currentUser) {
                    this.createInteractButtons('reply', currentUserFlexboxContainer);
                } else {
                   ['delete', 'edit'].forEach( i => this.createInteractButtons(i, currentUserFlexboxContainer));
                }
        }
        , gridRowUpdater = function(tg) {
            let replyCount = tg.querySelectorAll('.comment-user-main-grid-container').length + 1;

            tg.firstChild.style.gridRow = `1 / ${++replyCount}`;
        };
        
        const comment = this.buildComment(),
            commentRepliesGrid = document.createElement('div'),
            commentRepliesLine = document.createElement('div'),
            currentUser = this.jsonData.currentUser.username,
            currentUserFlexboxContainer = comment.querySelector('.comment-user-flexbox-container');
            
        commentRepliesGrid.classList.add('comment-user-nested-grid-container');
        commentRepliesLine.classList.add('comment-user-nested-grid-container-line');
        
        comment.setAttribute('data-cid', obj.id);
        comment.querySelector('.comment-content').innerText = obj.content;
        comment.querySelector('.comment-date').innerText = obj.createdAt;
        comment.querySelector('.comment-rate-element-value').innerText = obj.score;
        comment.querySelector('.comment-uid').innerText = obj.user.username;
        comment.querySelector('.comment-avatar').src = obj.user.image.png;
        
        let crgClass = commentRepliesGrid.classList[0];

        switch(type) {
            case 'comment':
                isCurrentUser();
                target.append(comment);
                break;
            case 'reply': 
                isCurrentUser();
                let cungc = undefined;
                if(target.matches('.comment-reply-this')) {

                    if(target.nextElementSibling.matches(`.${crgClass}`)) {
                        cungc = target.nextElementSibling;
                        gridRowUpdater(cungc);
                        target.nextElementSibling.append(comment);
                    }
                    else if(target.closest(`.${crgClass}`)) {
                        cungc = target.closest(`.${crgClass}`),
                        gridRowUpdater(cungc);
                        target.after(comment);
                    } 
                    else if(!target.nextElementSibling.matches(`.${crgClass}`) && !target.closest(`.${crgClass}`)) { 
                        commentRepliesGrid.append(commentRepliesLine, comment);
                        target.after(commentRepliesGrid);
                    }
                } else {
                    if(!target.lastElementChild.matches(`.${crgClass}`)) {
                        commentRepliesGrid.append(commentRepliesLine, comment);
                        target.append(commentRepliesGrid);
                    } else {
                        cungc = [].at.call(target.querySelectorAll(`.${crgClass}`), -1);
                        gridRowUpdater(cungc);
                        cungc.append(comment);
                    }
                }
                break;
        }
    }
    // Events:
    eventsStore(obj, replyJsonTarget, storeActionType) {
        const localJson = JSON.parse(localStorage['dataJson']),
            cid = Number.parseInt(replyJsonTarget.getAttribute('data-cid'));
        let ljc = localJson.comments.find(c => c.id === cid),
            ljr = undefined;

        for(let c of localJson.comments) {
            ljr = c.replies.find(r => r.id === cid);
            if(ljr) break;
        }
        
        const storeByActionType = (sbat) => {
            if(ljc) {
                switch(sbat) {
                    case 'reply':
                        ljc.replies.push(obj);
                        break;
                    case 'edit':
                        ljc.content = replyJsonTarget.querySelector('.comment-content').innerText;
                        break;
                }
            }
            else if(ljr) {
                switch(sbat) {
                    case 'reply':
                        ljr.push(obj);
                        break;
                    case 'edit':                                        
                        ljr.content = replyJsonTarget.querySelector('.comment-content').innerText;
                        break;
                }
            }
        }

        if(!replyJsonTarget) {
            localJson.comments.push(obj);
        } else {
            storeByActionType(storeActionType);
        }
        localStorage['dataJson'] = JSON.stringify(localJson);
    }
    // Buttons behaviour:
    responser(ect) {
        let cmtObj = null,
            replyElement = this.container.querySelector('.comment-user-add-response'),
            replyElementBtn = replyElement.querySelector('button'),
            commentTarget = null;

        if(ect.matches('.add-response-send-button')) {
            cmtObj = this.createCommentReplyObj();
            this.eventsStore(cmtObj); // order matters to update textarea
            this.buildElement(cmtObj, 'comment', this.container);
            this.container.append(this.commentBox);
            this.commentBoxTextarea.value = '';
        }
        else if(ect.matches('.comment-reply')) {
            commentTarget = ect.closest('.comment-user-main-grid-container');
            this.replyJsonTarget = (!commentTarget.closest('.comment-user-nested-grid-container')) ? 
                commentTarget :
                commentTarget.parentElement.previousElementSibling;
            const targetUserName = commentTarget.querySelector('.comment-uid').innerText;

            commentTarget.classList.toggle('comment-reply-this');
            replyElementBtn.classList.toggle('add-response-send-button');
            replyElementBtn.classList.toggle('add-reply-send-button');
            replyElement.querySelector('textarea').placeholder = `Reply @${targetUserName} `;
            replyElement.querySelector('textarea').value = `@${targetUserName}: `;
            replyElementBtn.innerText = 'REPLY';
            commentTarget.after(replyElement);
        }
        else if(ect.matches('.add-reply-send-button')){ // && !ect.closest('.comment-user-main-grid-container').nextElementSibling.matches('.comment-reply-this')) {
            commentTarget = document.querySelector('.comment-reply-this');
            cmtObj = this.createCommentReplyObj();
            cmtObj.replyingTo = commentTarget.querySelector('.comment-uid').innerText;
            this.eventsStore(cmtObj, this.replyJsonTarget, 'reply');
            this.container.append(replyElement);
            this.buildElement(cmtObj, 'reply', commentTarget);
            replyElementBtn.classList.toggle('add-reply-send-button');
            replyElementBtn.classList.toggle('add-response-send-button');
            replyElement.querySelector('textarea').value = '';
            replyElement.querySelector('textarea').placeholder = ' Add a comment...';
            replyElementBtn.innerText = 'SEND';
            commentTarget.classList.toggle('comment-reply-this');
            this.replyJsonTarget = null;
        }

    }
    editorCreateEditConfirmUndo() {
        const editFlexBtnContainer = document.createElement('div'),
            editConfirm = document.createElement('button'),
            editUndo = document.createElement('button');
                
        editFlexBtnContainer.classList.add('comment-edited-fb-button-container');
        editConfirm.classList.add('edit-button', 'edit-button-confirm');
        editUndo.classList.add('edit-button', 'edit-button-undo');
        editConfirm.innerText = 'EDIT';
        editUndo.innerText = 'UNDO';
        editFlexBtnContainer.append(editConfirm, editUndo);

        return editFlexBtnContainer;
    }   
    //event handler
    eventsListener(whoAmI) {
        if(!whoAmI){
            this.btn = document.querySelectorAll('button');
            this.commentBox = document.querySelector('.comment-user-add-response');
            this.commentBoxTextarea = document.querySelector('.add-response-textarea');        
            this.btn.forEach( b => b.addEventListener('click', this));
        } else {
            whoAmI.classList.toggle('is-edited');
            whoAmI.lastElementChild.querySelectorAll('button').forEach( b => b.addEventListener('click', this));

        }
    }
    handleEvent(e) {
        const responseBtn = ['.add-response-send-button', '.comment-reply', '.add-reply-send-button'],
            editBtnClk = [
                ['.comment-edit', 'edited'],
                ['.edit-button-confirm', 'editConfirm'],
                ['.edit-button-undo', 'editUndo']
            ], 
            classTarget = [
                //'comment-edited-fb-button-container',
                'comment-user-main-grid-container-edit',
                'comment-rate-edit',
                'comment-content-edit'
            ],
            deleteBtn = '.comment-delete';
        let ect = e.currentTarget;
        
        function elementsPropertiesRemover(classTarget, attributeTarget) {
            let elementTarget = classTarget.map(ct => document.querySelectorAll('.' + ct)); //forEach doesn't work because after the processing it doesn't return an array, but it handles each item indipendently. So you'll come up to an undefined.
            
            for(let i = 0; i < classTarget.length; i++) {
                elementTarget[i].forEach( et => { // > NodeList.prototype.hasOwnProperty('forEach'); // true ||vs|| > NodeList.prototype.hasOwnProperty('map'); // false
                    if(arguments.length > 1 && et.getAttribute(attributeTarget)) {
                        et.setAttribute(attributeTarget, false);
                    }
                    et.classList.remove(classTarget[i]);
                } );
            }
        }

        switch(e.type) {
            case 'click':
                responseBtn.map(r => {
                    if(ect.matches(r)) this.responser(ect);
                });
                editBtnClk.map(e => {
                    if(e[1] === 'edited') elementsPropertiesRemover(classTarget, 'contentEditable');
                    if(ect.matches(e[0])) this.editor(ect, e[1]);
                });
                break;
        }
    }
    
    //editor
    editor(ect, clk) {
        const editElement = ect.closest('.comment-user-main-grid-container'),
            editContent = editElement.querySelector('.comment-content'),
            editCommentRatefb = editElement.querySelector('.comment-rate');
        
        function editConfirmerUndoer() {
            editElement.classList.remove('comment-user-main-grid-container-edit');
            editContent.setAttribute('contentEditable', false);
            editContent.classList.remove('comment-content-edit');
            editCommentRatefb.classList.remove('comment-rate-edit');
            editElement.lastElementChild.remove();
        }
        function editClassAdder() {
            //if(editElement.lastElementChild.matches('.comment-edited-fb-button-container')) {
                editElement.classList.add('comment-user-main-grid-container-edit');
                editContent.classList.add('comment-content-edit');
                editCommentRatefb.classList.add('comment-rate-edit');
                editContent.setAttribute('contentEditable', true);
            //}
        }
                
        switch(clk) {
            case 'edited': 
                editElement.append(this.editUndoContainer);
                this.eventsListener(editElement);
                editClassAdder();
                break;
            case 'editConfirm':
                this.eventsStore(null, editContent.parentElement, 'edit');                
                editConfirmerUndoer();
                break;
            case 'editUndo':
                editConfirmerUndoer();
                break;
        }
    }

    //responseSec(appendElement) {
    responseSec() {
        const commentContainer = document.createElement('div'),
            commentContainerImg = new Image(),
            commentContainerFb = document.createElement('div'),
            commentContainerFbTextarea = document.createElement('textarea'),
            commentContainerFbBtnSend = document.createElement('button');
            
        commentContainer.classList.add('comment-user-add-response');
        commentContainerImg.classList.add('comment-user-add-response-avatar');
        commentContainerFb.classList.add('comment-user-add-response-flexbox');
        commentContainerFbTextarea.classList.add('add-response-textarea');
        commentContainerFbTextarea.placeholder = ' Add a comment...';
        commentContainerFbBtnSend.classList.add('add-response-send-button');

        commentContainerImg.src = JSON.parse(localStorage['dataJson']).currentUser.image.png;
        commentContainerFbBtnSend.type = 'button';
        commentContainerFbBtnSend.innerText = 'SEND';

        commentContainerFb.append(commentContainerFbTextarea, commentContainerFbBtnSend);
        commentContainer.append(commentContainerImg, commentContainerFb);

        return commentContainer;
    }


} 