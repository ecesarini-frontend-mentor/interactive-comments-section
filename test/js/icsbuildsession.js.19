export class BuildSession {
    constructor(jFile) {
        this.jFile = jFile;
        this.jsonData = null;
        this.container = document.querySelector('.comment-container');

        this.btn = this.commentBox = this.commentBoxTextarea = null;

        this.getJsonData();
    } 
    // FETCH data
    async getJsonData() {
        this.jsonData = JSON.parse(localStorage.getItem(['dataJson']));
        if(!this.jsonData) {
            try {
                this.jsonData = await fetch(this.jFile).then(res => res.json()).then( data => data);
                localStorage.setItem('dataJson', JSON.stringify(this.jsonData));
                this.initBS();
            }
            catch(error) {
                console.log(error);
            }
        } else {this.initBS(); }
    }
    //Initiator
    initBS() {
        this.drawUp();
        this.eventsListener();
    }
    drawUp() {
        this.jsonData.comments.forEach( c => {
            this.buildElement(c, 'comment', this.container);
            if(c.replies.length > 0) {
                c.replies.forEach( r => {
                    this.buildElement(r, 'reply', this.container, true);
                });
            } 
        });
        this.container.append(this.responseSec());
    }

    // General
    buildComment() {
        //Create html elements
        const comment = document.createElement('div'),
            commentUserGrid = document.createElement('div'),
            commentRate = document.createElement('div'),
            commentRatePlus = document.createElement('button'),
            commentRatePlusObj = document.createElement('object'),
            commentRateValue = document.createElement('span'),
            commentRateMinus = document.createElement('button'),
            commentRateMinusObj = document.createElement('object'),
            commentTopFb = document.createElement('div'),
            commentTopFbAvatar = new Image(),
            commentTopFbUid = document.createElement('span'),
            commentTopFbDate = document.createElement('span'),
            commentBottomContent = document.createElement('div');
        //Assign classes
        comment.classList.add('comment-user-main-grid-container');
        commentUserGrid.classList.add('comment-user-grid-element', 'comment-rate');
        commentRate.classList.add('comment-rate-flexbox');
        commentRatePlus.classList.add('comment-rate-element', 'comment-rate-element-plus');
        commentRatePlusObj.classList.add('vote');
        commentRatePlusObj.setAttribute('type', 'image/svg+xml');
        commentRatePlusObj.setAttribute('data', 'images/icon-plus.svg');
        commentRateValue.classList.add('comment-rate-element', 'comment-rate-element-value');
        commentRateMinus.classList.add('comment-rate-element', 'comment-rate-element-minus');
        commentRateMinusObj.classList.add('vote');
        commentRateMinusObj.setAttribute('type', 'image/svg+xml');
        commentRateMinusObj.setAttribute('data', 'images/icon-minus.svg');
        commentTopFb.classList.add('comment-user-grid-element', 'comment-user-flexbox-container');
        commentTopFbAvatar.classList.add('comment-user-flexbox-element', 'comment-avatar');
        commentTopFbUid.classList.add('comment-user-flexbox-element', 'comment-uid');
        commentTopFbDate.classList.add('comment-user-flexbox-element', 'comment-date');        
        commentBottomContent.classList.add('comment-user-grid-element', 'comment-content');
        //Connect elements
        comment.append(commentUserGrid, commentTopFb, commentBottomContent);
        commentUserGrid.append(commentRate);
        commentRatePlus.append(commentRatePlusObj, commentRatePlusObj);
        commentRateMinus.append(commentRateMinusObj, commentRateMinusObj);
        commentRate.append(commentRatePlus, commentRateValue, commentRateMinus);
        commentTopFb.append(commentTopFbAvatar, commentTopFbUid, commentTopFbDate);
        
        return comment;
    }
    interactButton(type, target) {
        const replyEditDeleteBtn = (btnType) => {
            const commentTopFbBtn = document.createElement('button'),
                commentTopFbBtnImage = document.createElement('object'),
                commentTopFbBtnContent = document.createElement('span');

            commentTopFbBtn.classList.add('comment-user-flexbox-element', `comment-${btnType}`);
            commentTopFbBtnImage.classList.add('interact');
            commentTopFbBtn.type = 'button';
            commentTopFbBtnImage.type = 'image/svg+xml';
            
            commentTopFbBtnImage.data = `images/icon-${btnType}.svg`;
            commentTopFbBtnContent.innerText = `${btnType[0].toUpperCase()}${btnType.slice(1)}`;
            commentTopFbBtn.append(commentTopFbBtnImage, commentTopFbBtnContent);
            
            return commentTopFbBtn;
        };
        
       return target.append(replyEditDeleteBtn(type));       
    }
    createCommentReplyObj() {
        const getMaxId = (obj) =>{
            let a = [];
            const getMax = (a, b) => Math.max(a, b);
            obj.comments.forEach( c => {
                a.push(c.id);
                if(c.replies.length > 0) {
                    c.replies.forEach( r => a.push(r.id) );
                }
            });
            return a.reduce(getMax);
        }
        const cuObj = {};
        
        cuObj.id = getMaxId(JSON.parse(localStorage['dataJson'])) + 1; 
        cuObj.content = this.commentBoxTextarea.value;
        cuObj.createdAt = new Date().getSeconds();
        cuObj.score = 0;
        cuObj.user = this.jsonData.currentUser;
        cuObj.replies = [];
        return cuObj;
    }
    
    // Build on first load
    buildElement(obj, type, target, fromJson) {
        const isCurrentUser = () => {
                if(obj.user.username !== currentUser) {
                    this.interactButton('reply', currentUserFlexboxContainer);
                } else {
                   ['delete', 'edit'].forEach( i => this.interactButton(i, currentUserFlexboxContainer));
                }
        };         
        const comment = this.buildComment(),
            commentRepliesGrid = document.createElement('div'),
            commentRepliesLine = document.createElement('div'),
            currentUser = this.jsonData.currentUser.username,
            currentUserFlexboxContainer = comment.querySelector('.comment-user-flexbox-container');
            
        commentRepliesGrid.classList.add('comment-user-nested-grid-container');
        commentRepliesLine.classList.add('comment-user-nested-grid-container-line');
        
        comment.querySelector('.comment-content').innerText = obj.content;
        comment.querySelector('.comment-date').innerText = obj.createdAt;
        comment.querySelector('.comment-rate-element-value').innerText = obj.score;
        comment.querySelector('.comment-uid').innerText = obj.user.username;
        comment.querySelector('.comment-avatar').src = obj.user.image.png;
        
        switch(type) {
            case 'comment':
                isCurrentUser();
                target.append(comment);
                break;
            case 'reply': 
                isCurrentUser();
                if(fromJson) {
                    if(!target.lastElementChild.matches(`.${commentRepliesGrid.classList[0]}`)) {
                        target.append(commentRepliesGrid);
                        commentRepliesGrid.append(commentRepliesLine, comment);
                    } else {
                        target.querySelector(`.${commentRepliesGrid.classList[0]}`).append(comment);
                    }
                } else {                    
                    target.after(comment);
                }
                break;
        }
    }
    // Events:
    eventsListener() {
        this.btn = document.querySelectorAll('button');
        this.commentBox = document.querySelector('.comment-user-add-response');
        this.commentBoxTextarea = document.querySelector('.add-response-textarea');        
        this.btn.forEach( b => b.addEventListener('click', this));
    }
    eventsStore(obj) {
        let localJson = JSON.parse(localStorage['dataJson']);

        localJson.comments.push(obj);
        localStorage['dataJson'] = JSON.stringify(localJson);
    }
    eventsFilterCommentReply(ect, cls) {

    }
    
    // event handler
    handleEvent(e) {
        let ect = e.currentTarget,
            replyElement = this.container.querySelector('.comment-user-add-response'),
            replyElementBtn = replyElement.querySelector('button'),
            commentTarget = null;

        switch(e.type) {
            case 'click':
                let cmtObj;

                if(ect.matches('.add-response-send-button')) {
                    cmtObj = this.createCommentReplyObj();
                    this.eventsStore(cmtObj); // order matters to update textarea
                    this.buildElement(cmtObj, 'comment', this.container);
                    this.container.append(this.commentBox);
                    this.commentBoxTextarea.value = '';
                }
                else if(ect.matches('.comment-reply')) {
                    commentTarget = ect.closest('.comment-user-main-grid-container');
                    replyElementBtn.classList.toggle('add-response-send-button');
                    replyElementBtn.classList.toggle('add-reply-send-button');
                    replyElement.querySelector('textarea').placeholder = '...Reply';
                    replyElementBtn.innerText = 'REPLY';
                    commentTarget.after(replyElement);                    
                }
                else if(ect.matches('.add-reply-send-button')) {
                    let cungc = replyElement.closest('.comment-user-nested-grid-container') || replyElement.nextElementSibling,
                        replyCount = cungc.querySelectorAll('.comment-user-main-grid-container').length + 1;

                    commentTarget = (replyElement.nextElementSibling === cungc) ?
                        cungc.lastElementChild :
                        replyElement.previousElementSibling;
                        
                    cmtObj = this.createCommentReplyObj();
                    this.eventsStore(cmtObj);
                    cungc.firstChild.style.gridRow = `1 / ${++replyCount}`;                    
                    this.buildElement(cmtObj, 'reply', commentTarget);
                    replyElementBtn.classList.toggle('add-reply-send-button');
                    replyElementBtn.classList.toggle('add-response-send-button');
                    replyElement.querySelector('textarea').value = '';
                    replyElement.querySelector('textarea').placeholder = ' Add a comment...';
                    replyElementBtn.innerText = 'SEND';
                    this.container.append(replyElement);

                }

                /*if(ect.matches('.comment-reply')) {
                    
                    cungc = ect.closest('.comment-user-nested-grid-container');
                    if(cungc) {
                        commentTarget.after(replyElement);
                    } else {
                        cungc = commentTarget.nextElementSibling;
                        commentTarget = cungc.lastElementChild;
                        cungc.before(replyElement);
                    }
                    let replyCount = cungc.querySelectorAll('.comment-user-main-grid-container').length + 1; 
                    
                    replyElementBtn.classList.toggle('add-reply-send-button');
                    replyElement.querySelector('textarea').placeholder = '...Reply';
                    replyElementBtn.innerText = 'REPLY';
                    //replyElementBtn.classList.toggle('.add-reply-send-button');
                    replyElementBtn.addEventListener('click', () => {
                        cmtObj = this.createCommentReplyObj();
                        cungc.firstChild.style.gridRow = `1 / ${++replyCount}`;
                        //cungc.style.gridRow = `1 / ${++replyCount}`;
                        replyElement.classList.toggle('comment-user-add-reply');
                        this.buildElement(cmtObj, 'reply', commentTarget);
                        replyElement.classList.toggle('comment-user-add-reply');
                        replyElement.querySelector('textarea').placeholder = '';
                        this.container.append(replyElement);
                        })
                }*/
                break;
        }
    }

    // Build mew comment container

    //ELEMENT section
    /*addElement(cmtProp, isBuilding, isReply, insertReplyTarget) {
        let currentUser = JSON.parse(localStorage['dataJson']).currentUser.username;

        
        if(isBuilding) {
            if(isReply) {
                if(!this.container.lastElementChild.matches('.comment-user-nested-grid-container')) {
                    this.container.append(commentRepliesGrid);                
                }
            qualifyUser(cmtProp);
            this.container.lastElementChild.append(comment);  // you gotta involve 'this.container' to let you manage html by javascript
            } else {
                qualifyUser(cmtProp);
                this.container.append(comment);
            }
        } 
    
        if(!isBuilding && insertReplyTarget) {
            if(insertReplyTarget.parentElement.matches('.comment-container')) {
                qualifyUser(cmtProp);
                insertReplyTarget.after(commentRepliesGrid);
                insertReplyTarget.nextElementSibling.append(comment);
            }
            else if(insertReplyTarget.parentElement.matches('.comment-user-main-grid-container')) {
                insertReplyTarget.append(comment);
            }
        }

    }*/

    //responseSec(appendElement) {
    responseSec() {
        const commentContainer = document.createElement('div'),
            commentContainerImg = new Image(),
            commentContainerFb = document.createElement('div'),
            commentContainerFbTextarea = document.createElement('textarea'),
            commentContainerFbBtnSend = document.createElement('button');
            
        commentContainer.classList.add('comment-user-add-response');
        commentContainerImg.classList.add('comment-user-add-response-avatar');
        commentContainerFb.classList.add('comment-user-add-response-flexbox');
        commentContainerFbTextarea.classList.add('add-response-textarea');
        commentContainerFbTextarea.placeholder = ' Add a comment...';
        commentContainerFbBtnSend.classList.add('add-response-send-button');

        commentContainerImg.src = JSON.parse(localStorage['dataJson']).currentUser.image.png;
        commentContainerFbBtnSend.type = 'button';
        commentContainerFbBtnSend.innerText = 'SEND';

        commentContainerFb.append(commentContainerFbTextarea, commentContainerFbBtnSend);
        commentContainer.append(commentContainerImg, commentContainerFb);

        return commentContainer;
    }


} 